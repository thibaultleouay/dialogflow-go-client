// Code generated by protoc-gen-go.
// source: google/cloud/dialogflow/v2beta1/context.proto
// DO NOT EDIT!

/*
Package dialogflow is a generated protocol buffer package.

It is generated from these files:
	google/cloud/dialogflow/v2beta1/context.proto

It has these top-level messages:
	Context
	ListContextsRequest
	ListContextsResponse
	GetContextRequest
	CreateContextRequest
	UpdateContextRequest
	DeleteContextRequest
	DeleteAllContextsRequest
*/
package dialogflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "google.golang.org/genproto/protobuf/field_mask"
import google_protobuf3 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Represents a context.
type Context struct {
	// Required. The unique identifier of the context. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
	// Note: The Context ID is always converted to lowercase.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional. The number of conversational query requests after which the
	// context expires. If set to `0` (the default) the context expires
	// immediately. Contexts expire automatically after 10 minutes even if there
	// are no matching queries.
	LifespanCount int32 `protobuf:"varint,2,opt,name=lifespan_count,json=lifespanCount" json:"lifespan_count,omitempty"`
	// Optional. The collection of parameters associated with this context.
	// Refer to [this doc](https://dialogflow.com/docs/actions-and-parameters) for
	// syntax.
	Parameters *google_protobuf3.Struct `protobuf:"bytes,3,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Context) GetParameters() *google_protobuf3.Struct {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// The request message for [Contexts.ListContexts].
type ListContextsRequest struct {
	// Required. The session to list all contexts from.
	// Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Optional. The maximum number of items to return in a single page. By
	// default 100 and at most 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Optional. The next_page_token value returned from a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListContextsRequest) Reset()                    { *m = ListContextsRequest{} }
func (m *ListContextsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContextsRequest) ProtoMessage()               {}
func (*ListContextsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The response message for [Contexts.ListContexts].
type ListContextsResponse struct {
	// The list of contexts. There will be a maximum number of items
	// returned based on the page_size field in the request.
	Contexts []*Context `protobuf:"bytes,1,rep,name=contexts" json:"contexts,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListContextsResponse) Reset()                    { *m = ListContextsResponse{} }
func (m *ListContextsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContextsResponse) ProtoMessage()               {}
func (*ListContextsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListContextsResponse) GetContexts() []*Context {
	if m != nil {
		return m.Contexts
	}
	return nil
}

// The request message for [Contexts.GetContext].
type GetContextRequest struct {
	// Required. The name of the context. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetContextRequest) Reset()                    { *m = GetContextRequest{} }
func (m *GetContextRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContextRequest) ProtoMessage()               {}
func (*GetContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// The request message for [Contexts.CreateContext].
type CreateContextRequest struct {
	// Required. The session to create a context for.
	// Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Required. The context to create.
	Context *Context `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *CreateContextRequest) Reset()                    { *m = CreateContextRequest{} }
func (m *CreateContextRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContextRequest) ProtoMessage()               {}
func (*CreateContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateContextRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

// The request message for [Contexts.UpdateContext].
type UpdateContextRequest struct {
	// Required. The context to update. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// Optional. The mask to control which fields get updated.
	UpdateMask *google_protobuf2.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateContextRequest) Reset()                    { *m = UpdateContextRequest{} }
func (m *UpdateContextRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContextRequest) ProtoMessage()               {}
func (*UpdateContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateContextRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *UpdateContextRequest) GetUpdateMask() *google_protobuf2.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// The request message for [Contexts.DeleteContext].
type DeleteContextRequest struct {
	// Required. The name of the context to delete. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteContextRequest) Reset()                    { *m = DeleteContextRequest{} }
func (m *DeleteContextRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContextRequest) ProtoMessage()               {}
func (*DeleteContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// The request message for [Contexts.DeleteAllContexts].
type DeleteAllContextsRequest struct {
	// Required. The name of the session to delete all contexts from. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
}

func (m *DeleteAllContextsRequest) Reset()                    { *m = DeleteAllContextsRequest{} }
func (m *DeleteAllContextsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAllContextsRequest) ProtoMessage()               {}
func (*DeleteAllContextsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Context)(nil), "google.cloud.dialogflow.v2beta1.Context")
	proto.RegisterType((*ListContextsRequest)(nil), "google.cloud.dialogflow.v2beta1.ListContextsRequest")
	proto.RegisterType((*ListContextsResponse)(nil), "google.cloud.dialogflow.v2beta1.ListContextsResponse")
	proto.RegisterType((*GetContextRequest)(nil), "google.cloud.dialogflow.v2beta1.GetContextRequest")
	proto.RegisterType((*CreateContextRequest)(nil), "google.cloud.dialogflow.v2beta1.CreateContextRequest")
	proto.RegisterType((*UpdateContextRequest)(nil), "google.cloud.dialogflow.v2beta1.UpdateContextRequest")
	proto.RegisterType((*DeleteContextRequest)(nil), "google.cloud.dialogflow.v2beta1.DeleteContextRequest")
	proto.RegisterType((*DeleteAllContextsRequest)(nil), "google.cloud.dialogflow.v2beta1.DeleteAllContextsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contexts service

type ContextsClient interface {
	// Returns the list of all contexts in the specified session.
	ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (*ListContextsResponse, error)
	// Retrieves the specified context.
	GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*Context, error)
	// Creates a context.
	CreateContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (*Context, error)
	// Updates the specified context.
	UpdateContext(ctx context.Context, in *UpdateContextRequest, opts ...grpc.CallOption) (*Context, error)
	// Deletes the specified context.
	DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Deletes all active contexts in the specified session.
	DeleteAllContexts(ctx context.Context, in *DeleteAllContextsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type contextsClient struct {
	cc *grpc.ClientConn
}

func NewContextsClient(cc *grpc.ClientConn) ContextsClient {
	return &contextsClient{cc}
}

func (c *contextsClient) ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (*ListContextsResponse, error) {
	out := new(ListContextsResponse)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/ListContexts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextsClient) GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*Context, error) {
	out := new(Context)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/GetContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextsClient) CreateContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (*Context, error) {
	out := new(Context)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/CreateContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextsClient) UpdateContext(ctx context.Context, in *UpdateContextRequest, opts ...grpc.CallOption) (*Context, error) {
	out := new(Context)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/UpdateContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextsClient) DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/DeleteContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextsClient) DeleteAllContexts(ctx context.Context, in *DeleteAllContextsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Contexts/DeleteAllContexts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contexts service

type ContextsServer interface {
	// Returns the list of all contexts in the specified session.
	ListContexts(context.Context, *ListContextsRequest) (*ListContextsResponse, error)
	// Retrieves the specified context.
	GetContext(context.Context, *GetContextRequest) (*Context, error)
	// Creates a context.
	CreateContext(context.Context, *CreateContextRequest) (*Context, error)
	// Updates the specified context.
	UpdateContext(context.Context, *UpdateContextRequest) (*Context, error)
	// Deletes the specified context.
	DeleteContext(context.Context, *DeleteContextRequest) (*google_protobuf1.Empty, error)
	// Deletes all active contexts in the specified session.
	DeleteAllContexts(context.Context, *DeleteAllContextsRequest) (*google_protobuf1.Empty, error)
}

func RegisterContextsServer(s *grpc.Server, srv ContextsServer) {
	s.RegisterService(&_Contexts_serviceDesc, srv)
}

func _Contexts_ListContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).ListContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/ListContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).ListContexts(ctx, req.(*ListContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contexts_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/GetContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).GetContext(ctx, req.(*GetContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contexts_CreateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).CreateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/CreateContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).CreateContext(ctx, req.(*CreateContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contexts_UpdateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).UpdateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/UpdateContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).UpdateContext(ctx, req.(*UpdateContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contexts_DeleteContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).DeleteContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/DeleteContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).DeleteContext(ctx, req.(*DeleteContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contexts_DeleteAllContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextsServer).DeleteAllContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Contexts/DeleteAllContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextsServer).DeleteAllContexts(ctx, req.(*DeleteAllContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contexts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dialogflow.v2beta1.Contexts",
	HandlerType: (*ContextsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContexts",
			Handler:    _Contexts_ListContexts_Handler,
		},
		{
			MethodName: "GetContext",
			Handler:    _Contexts_GetContext_Handler,
		},
		{
			MethodName: "CreateContext",
			Handler:    _Contexts_CreateContext_Handler,
		},
		{
			MethodName: "UpdateContext",
			Handler:    _Contexts_UpdateContext_Handler,
		},
		{
			MethodName: "DeleteContext",
			Handler:    _Contexts_DeleteContext_Handler,
		},
		{
			MethodName: "DeleteAllContexts",
			Handler:    _Contexts_DeleteAllContexts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dialogflow/v2beta1/context.proto",
}

func init() { proto.RegisterFile("google/cloud/dialogflow/v2beta1/context.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0xe5, 0x0e, 0xb6, 0xce, 0x5b, 0x41, 0x33, 0xd5, 0xa8, 0xba, 0xa1, 0x55, 0x41, 0x40,
	0x55, 0x69, 0x89, 0x28, 0xef, 0x4c, 0x4c, 0xda, 0x5a, 0x36, 0x21, 0x81, 0x98, 0x3a, 0xe0, 0xc0,
	0xa5, 0x72, 0xd3, 0xa7, 0x59, 0x58, 0x1a, 0x87, 0xd8, 0x81, 0x6d, 0x68, 0x17, 0xc4, 0x37, 0xe0,
	0xc0, 0x8d, 0x03, 0x07, 0x0e, 0xfb, 0x06, 0x88, 0x03, 0xe2, 0x33, 0x70, 0xe2, 0xce, 0x87, 0xe0,
	0x88, 0xe2, 0x38, 0x7d, 0x59, 0x3b, 0xda, 0xec, 0x96, 0xd8, 0x7f, 0x3f, 0xcf, 0xef, 0xb1, 0xff,
	0x8f, 0x13, 0xbc, 0x6c, 0x31, 0x66, 0x39, 0x60, 0x98, 0x0e, 0x0b, 0x9a, 0x46, 0xd3, 0xa6, 0x0e,
	0xb3, 0x5a, 0x0e, 0x7b, 0x6b, 0xbc, 0x29, 0x37, 0x40, 0xd0, 0xeb, 0x86, 0xc9, 0x5c, 0x01, 0x7b,
	0x42, 0xf7, 0x7c, 0x26, 0x18, 0x59, 0x8a, 0xe4, 0xba, 0x94, 0xeb, 0x5d, 0xb9, 0xae, 0xe4, 0xf9,
	0x45, 0x15, 0x8f, 0x7a, 0xb6, 0x41, 0x5d, 0x97, 0x09, 0x2a, 0x6c, 0xe6, 0xf2, 0x68, 0x79, 0x7e,
	0x41, 0xcd, 0xca, 0xb7, 0x46, 0xd0, 0x32, 0xa0, 0xed, 0x89, 0x7d, 0x35, 0x59, 0x38, 0x3e, 0xd9,
	0xb2, 0xc1, 0x69, 0xd6, 0xdb, 0x94, 0xef, 0x2a, 0xc5, 0xe2, 0x71, 0x05, 0x17, 0x7e, 0x60, 0x2a,
	0x36, 0xed, 0x10, 0x4f, 0x55, 0x22, 0x58, 0x42, 0xf0, 0x19, 0x97, 0xb6, 0x21, 0x87, 0x0a, 0xa8,
	0x38, 0x5d, 0x93, 0xcf, 0xe4, 0x0a, 0x3e, 0xe7, 0xd8, 0x2d, 0xe0, 0x1e, 0x75, 0xeb, 0x26, 0x0b,
	0x5c, 0x91, 0x4b, 0x15, 0x50, 0xf1, 0x6c, 0x2d, 0x13, 0x8f, 0x56, 0xc2, 0x41, 0x72, 0x07, 0x63,
	0x8f, 0xfa, 0xb4, 0x0d, 0x02, 0x7c, 0x9e, 0x9b, 0x28, 0xa0, 0xe2, 0x4c, 0xf9, 0xa2, 0xae, 0xca,
	0x8e, 0x13, 0xeb, 0xdb, 0x32, 0x71, 0xad, 0x47, 0xaa, 0xd9, 0xf8, 0xc2, 0x63, 0x9b, 0x0b, 0x85,
	0xc0, 0x6b, 0xf0, 0x3a, 0x00, 0x2e, 0xc8, 0x3c, 0x9e, 0xf4, 0xa8, 0x0f, 0xae, 0x50, 0x30, 0xea,
	0x8d, 0x2c, 0xe0, 0x69, 0x8f, 0x5a, 0x50, 0xe7, 0xf6, 0x01, 0x28, 0x92, 0x74, 0x38, 0xb0, 0x6d,
	0x1f, 0x00, 0xb9, 0x14, 0x42, 0x58, 0x50, 0x17, 0x6c, 0x17, 0x5c, 0x09, 0x31, 0x5d, 0x93, 0xf2,
	0x67, 0xe1, 0x80, 0xf6, 0x01, 0xe1, 0x6c, 0x7f, 0x2e, 0xee, 0x31, 0x97, 0x03, 0xa9, 0xe2, 0xb4,
	0x3a, 0x2f, 0x9e, 0x43, 0x85, 0x89, 0xe2, 0x4c, 0xb9, 0xa8, 0x8f, 0x38, 0x31, 0x5d, 0x05, 0xa9,
	0x75, 0x56, 0x92, 0xab, 0xf8, 0xbc, 0x0b, 0x7b, 0xa2, 0xde, 0x83, 0x90, 0x92, 0x08, 0x99, 0x70,
	0x78, 0xab, 0x83, 0x71, 0x0d, 0xcf, 0x6d, 0x42, 0x0c, 0x11, 0xd7, 0x3b, 0x64, 0xeb, 0x35, 0x1f,
	0x67, 0x2b, 0x3e, 0x50, 0x01, 0xc7, 0xb4, 0x27, 0xed, 0xcd, 0x3a, 0x9e, 0x52, 0x30, 0x32, 0x71,
	0x92, 0x2a, 0xe2, 0x85, 0xda, 0x27, 0x84, 0xb3, 0xcf, 0xbd, 0xe6, 0x60, 0xd2, 0x9e, 0xe0, 0xe8,
	0x94, 0xc1, 0xc9, 0x0a, 0x9e, 0x09, 0x64, 0x6c, 0xe9, 0x4e, 0x05, 0x99, 0x1f, 0x70, 0xc9, 0x46,
	0x68, 0xe0, 0x27, 0x94, 0xef, 0xd6, 0x70, 0x24, 0x0f, 0x9f, 0xb5, 0x12, 0xce, 0x56, 0xc1, 0x81,
	0x01, 0xb0, 0x61, 0x3b, 0x57, 0xc6, 0xb9, 0x48, 0xbb, 0xe6, 0x38, 0x63, 0x3a, 0xab, 0xfc, 0x23,
	0x8d, 0xd3, 0xb1, 0x96, 0x7c, 0x47, 0x78, 0xb6, 0xd7, 0x2a, 0xe4, 0xe6, 0xc8, 0x6a, 0x87, 0xb8,
	0x38, 0x7f, 0x2b, 0xe1, 0xaa, 0xc8, 0x8f, 0xda, 0xea, 0xfb, 0x5f, 0x7f, 0x3e, 0xa6, 0xee, 0x92,
	0xdb, 0x9d, 0xeb, 0xe4, 0x5d, 0x04, 0xf9, 0xc0, 0xf3, 0xd9, 0x2b, 0x30, 0x05, 0x37, 0x4a, 0x06,
	0xb5, 0xc0, 0x15, 0x06, 0x07, 0xce, 0xc3, 0x9b, 0xc2, 0x28, 0x1d, 0x1a, 0x1d, 0x27, 0x1e, 0x21,
	0x8c, 0xbb, 0x16, 0x23, 0xe5, 0x91, 0x14, 0x03, 0x7e, 0xcc, 0x8f, 0x7d, 0xba, 0xc3, 0x60, 0xc3,
	0x33, 0xf8, 0x1f, 0x6a, 0x87, 0xd4, 0x28, 0x1d, 0x92, 0x6f, 0x08, 0x67, 0xfa, 0x6c, 0x4e, 0x46,
	0xef, 0xda, 0xb0, 0xb6, 0x48, 0x80, 0xbc, 0x29, 0x91, 0xd7, 0xb4, 0x53, 0xee, 0xef, 0xfd, 0x8e,
	0xa1, 0x7f, 0x22, 0x9c, 0xe9, 0xeb, 0x96, 0x31, 0xd8, 0x87, 0x75, 0x57, 0x02, 0xf6, 0xa7, 0x92,
	0xfd, 0x51, 0x79, 0xb5, 0xcb, 0x1e, 0x7f, 0x6b, 0x92, 0x6c, 0x7b, 0xb7, 0x86, 0xcf, 0x08, 0x67,
	0xfa, 0x1a, 0x6b, 0x8c, 0x1a, 0x86, 0x35, 0x62, 0x7e, 0x7e, 0xa0, 0x91, 0x1f, 0x86, 0x9f, 0xa9,
	0xd8, 0x20, 0xa5, 0xd3, 0x1a, 0xe4, 0x2b, 0xc2, 0x73, 0x03, 0xdd, 0x4c, 0xee, 0x8d, 0x09, 0x39,
	0x78, 0x03, 0x24, 0x01, 0x4d, 0x62, 0x8b, 0xf5, 0xdf, 0x08, 0x5f, 0x36, 0x59, 0x7b, 0x14, 0xd8,
	0xfa, 0xac, 0x02, 0xda, 0x0a, 0xd3, 0x6f, 0xa1, 0x97, 0x7b, 0x96, 0x2d, 0x76, 0x82, 0x86, 0x6e,
	0xb2, 0xb6, 0x21, 0x76, 0xec, 0x06, 0x0d, 0x1c, 0xe1, 0x00, 0x0b, 0xe8, 0x7e, 0xcf, 0x9f, 0xc5,
	0xb2, 0xc5, 0x96, 0x4d, 0xc7, 0x0e, 0x93, 0xab, 0xf8, 0x16, 0x73, 0xa8, 0x6b, 0xe9, 0xcc, 0xb7,
	0x0c, 0x0b, 0x5c, 0x59, 0x8b, 0x9a, 0xa2, 0x9e, 0xcd, 0x4f, 0xfc, 0x35, 0x59, 0xe9, 0x0e, 0xfd,
	0x45, 0xe8, 0x4b, 0x2a, 0x55, 0xdd, 0x38, 0x4a, 0x2d, 0x6d, 0x46, 0x31, 0x2b, 0x92, 0xb9, 0xda,
	0x65, 0x7e, 0x11, 0x2d, 0x6a, 0x4c, 0xca, 0xf8, 0x37, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0xbd, 0x7c, 0x7b, 0xf9, 0x08, 0x00, 0x00,
}
